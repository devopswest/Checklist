/**
  * Retrention (7y +1 = 8y), Purge, review steps needs to be cofigured
  * CLient Tag... MDM ?
  * Business Engine. Business engine cicle, workflow, wizzard.
  *
  * quetions matriz vs disculose requirements
  *
  **/


/**
 * Types
 **/
enum ChecklistTemplateStatus {
    DRAFT,
    RELEASED
}

enum DisclosureRequireacmentStatus {
    DRAFT,
    RELEASED
}

enum ResponseStatus {
    DRAFT,
    FINAL
}

enum WorkflowTaskStatus {
    PENDING,
    COMPLETED
}

enum ApplicationAuthorities {
    ROLE_ADMIN,
    ROLE_USER,
    ROLE_PWC_ENGAGEMENT_TEAM,
    ROLE_PWC_PERSSONEL_US,
    ROLE_PWC_PERSSONEL_TERRITORY,
    ROLE_PWC_MANAGEMENT,
    ROLE_CLIENT_ADMIN,
    ROLE_CLIENT_USER,
    ROLE_LICENSED_ADMIN,
    ROLE_LICENSED_USER,
    ROLE_LPS_ADMIN,
    ROLE_LPS_USER
}

enum EngagementAuthorities {
    ROLE_PWC_ENGAGEMENT_TEAM,
    ROLE_PWC_PERSSONEL_US,
    ROLE_PWC_PERSSONEL_TERRITORY,
    ROLE_PWC_MANAGEMENT
}

/**
  * Entities
  *
  * entity B (the_best_entity) // the_best_entity is the table's name
  **/


/**
 * Lookups
 **/

entity Taxonomy {
    code String,
    label String  required  minlength(1)  maxlength(50)
}

relationship OneToMany {
    Taxonomy{child} to Taxonomy{parent(label)}
}


/**
 * Client
 *
 * TODO: Additional Tag. LOS, etc, Client Profile ( i have cache, recibables, invenmtory this drive the requirements)
 *
 **/
entity Client {
    code String,
    name String,
    duns String,
    partyId String,
    cesId String
}



entity ClientTag {
    tagValue String
}

relationship ManyToOne {
    ClientTag{tagProperty(label)} to Taxonomy
}


relationship OneToMany {
    Client{tags} to ClientTag{client(name)}
}



/**
 * ClientLicenses
 **/


entity ClientLicense {
     contactName String,
     contactEmail String,
     expirationDate ZonedDateTime,
     activationToken String minlength(1) maxlength(4000)
}

relationship ManyToOne {
    ClientLicense{client(name)} to Client
}

relationship ManyToOne {
    ClientLicense{clientLicenseType(label)} to Taxonomy
}



/**
 * Workflow
 *
 * TODO: Workflow review tracking
 *
 **/

 /**
 *
 * Templates/Email Templates
 *
 */
 entity Template {
    code String,
    description String,
    content String minlength(1) maxlength(4000)
}


entity Workflow {
    name String,
    description String
}


entity WorkflowStep {
    name String,
    description String,
    authority ApplicationAuthorities
}

/*
 * SHould be thru table but JHIPSTER is not exposing authorities entity
 */
 /*
relationship ManyToOne{
    WorkflowStep{authority(name)} to Authority
}
*/

relationship OneToMany {
    Workflow to WorkflowStep{workflow(name)}
}


relationship ManyToOne{
    WorkflowStep{template(description)} to Template
}



/**
 * Library
 *
 * TODO: Matrix vs Client metaada
 *
 * TODO: DisclosureRequirements help or guidance fields.
 * Main/core checlists, Supplemental ChecklistTemplates
 *
 **/
entity ChecklistTemplate {
    name String,
    description String,
    version String,
    status ChecklistTemplateStatus
}


/*
 * This is the future/next definition where ChecklistTemplate is not longer needed
 */
entity Requirement {
    name String,
    description String
}


entity DisclosureRequirement {
    code String,
    description String minlength(1) maxlength(4000)
}

relationship OneToMany {
    ChecklistTemplate{disclosureRequirements} to DisclosureRequirement{checklistTemplate(name)}
}

/*
 * DisclosureRequirements/Questions will be reused across Requirements
 */
relationship ManyToMany {
    Requirement{disclosureRequirement(description)} to DisclosureRequirement{requirement}
}




relationship ManyToOne {
    ChecklistTemplate{territory(label)} to Taxonomy
}

relationship ManyToOne {
    ChecklistTemplate{formType(label)} to Taxonomy
}

relationship OneToMany {
    DisclosureRequirement{child} to DisclosureRequirement{parent(description)}
}


entity DisclosureRequirementTag {
    tagValue String
}

relationship ManyToOne {
    DisclosureRequirementTag{tagProperty(label)} to Taxonomy
}


relationship OneToMany {
    DisclosureRequirement{tags} to DisclosureRequirementTag{disclosureRequirement(description)}
}





/**
 * Engagement
 *
 *
 **/
entity Engagement {
    fiscalYear String,
    description String,
    status ResponseStatus
}

relationship ManyToOne{
    Engagement{client(name)} to Client
}

relationship ManyToOne{
    Engagement{workflow(name)} to Workflow
}

entity EngagementChecklistTemplate {
}

relationship ManyToOne{
    EngagementChecklistTemplate{checklistTemplate(name)} to ChecklistTemplate
}

relationship ManyToOne{
    EngagementChecklistTemplate{workflow(name)} to Workflow
}


entity EngagementMember {
    authority EngagementAuthorities
}
relationship OneToOne{
    EngagementMember{user(login)} to User
}

relationship OneToMany {
    Engagement{members} to EngagementMember{engagement(description)}
}

relationship OneToMany {
    Engagement{checklistTemplate} to EngagementChecklistTemplate{engagement(description)}
}



/**
 * Response Responses
 *
 *
 **/
entity Checklist {
    description String,
    status ResponseStatus
}

relationship ManyToOne{
    Checklist{engagement(description)} to Engagement
}

relationship ManyToOne{
    Checklist{owner(login)} to User
}

/*
relationship ManyToOne {
    Checklist{checklistTemplate(name)} to ChecklistTemplate
}
*/

/*
 * TODO: Answer might be N/A, Yes, No + comments
 *
 */
entity ChecklistAnswer {
    answer  String,
    comments String
}

relationship ManyToOne{
    ChecklistAnswer{DisclosureRequirement(description)} to DisclosureRequirement
}


relationship ManyToMany {
    Checklist{checklistAnswer(answer)} to ChecklistAnswer{checklist}
}


entity ChecklistHistoryChanges {
    happened ZonedDateTime,
    description String
}

relationship ManyToOne{
    ChecklistHistoryChanges{who(login)} to User
}

relationship OneToMany {
    Checklist{log(description)} to ChecklistHistoryChanges
}


entity ChecklistWorkflow {
    happened ZonedDateTime,
    status WorkflowTaskStatus,
    comments String
}

relationship ManyToOne{
    ChecklistWorkflow{who(login)} to User
}

relationship ManyToOne{
    ChecklistWorkflow{workflow(name)} to Workflow
}

relationship OneToMany {
    Checklist{review} to ChecklistWorkflow
}


/**
  * To allow review workflow per DisclosureRequirement/section answer
  */
relationship ManyToOne{
    ChecklistWorkflow{checklistAnswer(answer)} to ChecklistAnswer
}





/**
 * Access Control
 **/

entity UserProfile {
   PPID String
}
relationship OneToOne{
    UserProfile{user(login)} to User
}

relationship ManyToOne{
    UserProfile{client(name)} to Client
}



entity Feature {
    code String  required  minlength(1)  maxlength(20) ,
    label String  required  minlength(1)  maxlength(50)
}

relationship OneToMany {
    Feature{child} to Feature{parent(label)}
}


entity FeatureAuthority {
    authority ApplicationAuthorities
}

/*
 * SHould be thru table but JHIPSTER is not exposing authorities entity
 */
relationship OneToMany{
    Feature{authorities} to FeatureAuthority{feature(label)}
}




/**
  * Notifications
  *
  **/
entity Notification {
   content String
}
relationship OneToOne{
    Notification{from(login)} to User
}
relationship OneToOne{
    Notification{to(login)} to User
}
entity NotificationAction {
   action String
}
relationship OneToMany{
    Notification{actions} to NotificationAction{notification}
}



/**
 * Options
 * NOTE: https://jhipster.github.io/jdl/
 *
 * paginate * with pager | infinite-scroll [except ?]
 * dto * with mapstruct [except ?]
 * service * with serviceClass | serviceImpl [except ?]
 * microservice * with <app-name> [except ?]
 * search * with elasticsearch [except ?]
 * skipClient for A
 * skipServer for B
 * angularSuffix * with mySuperEntities
 *
 **/
paginate * with pager
dto * with mapstruct
service * with serviceImpl


//dto ChecklistTemplate with mapstruct
//dto DisclosureRequirement with mapstruct
//dto Checklist with mapstruct
//dto ChecklistAnswer with mapstruct
