/**
  * Retrention (7y +1 = 8y), Purge, review steps needs to be cofigured
  * CLient Metadata... MDM ?
  * Business Engine. Business engine cicle, workflow, wizzard.
  *
  * quetions matriz vs disculose requirements
  *
  **/


/**
 * Types
 **/
enum ChecklistStatus {
    DRAFT,
    RELEASED
}

enum QuestionStatus {
    DRAFT,
    RELEASED
}

enum ResponseStatus {
    DRAFT,
    FINAL
}

enum WorkflowTaskStatus {
    PENDING,
    COMPLETED
}

enum ApplicationAuthorities {
    ROLE_ADMIN,
    ROLE_USER,
    ROLE_PWC_ENGAGEMENT_TEAM,
    ROLE_PWC_PERSSONEL_US,
    ROLE_PWC_PERSSONEL_TERRITORY,
    ROLE_PWC_MANAGEMENT,
    ROLE_CLIENT_ADMIN,
    ROLE_CLIENT_USER,
    ROLE_LICENSED_ADMIN,
    ROLE_LICENSED_USER,
    ROLE_LPS_ADMIN,
    ROLE_LPS_USER
}

enum EngagementAuthorities {
    ROLE_PWC_ENGAGEMENT_TEAM,
    ROLE_PWC_PERSSONEL_US,
    ROLE_PWC_PERSSONEL_TERRITORY,
    ROLE_PWC_MANAGEMENT
}

/**
  * Entities
  *
  * entity B (the_best_entity) // the_best_entity is the table's name
  **/

/**
 * Global Config
 **/
 entity GlobalConfiguration {
    propertyKey String,
    propertyValue String
}

/**
 * Lookups
 **/

entity Taxonomy {
    code String  required  minlength(1)  maxlength(20) ,
    label String  required  minlength(1)  maxlength(50)
}

relationship OneToMany {
    Taxonomy{child} to Taxonomy{parent(label)}
}


entity Country {
    code String,
    name String
}

/**
 * Client
 *
 * TODO: Additional Metadata. LOS, etc, Client Profile ( i have cache, recibables, invenmtory this drive the requirements)
 *
 **/
entity Client {
    code String,
    name String
}

entity Clientrofile {

}
relationship OneToOne{
    Clientrofile{client(name)} to Client
}



/*
entity ClientMetadata {
    metadataValue String
}

relationship OneToMany {
    Taxonomy to Clientrofile{metadataProperty(label)}
}


relationship ManyToMany {
    Clientrofile{metadata(label)} to ClientMetadata{client}
}
*/


/**
 * Licenses
 **/


entity License {
     contactName String,
     contactEmail String,
     expirationDate ZonedDateTime,
     activationToken String minlength(1) maxlength(4000)
}

relationship OneToMany {
    Client to License{client(name)}
}

relationship OneToMany {
    Taxonomy to License{licenseType(label)}
}


/**
 * Library
 *
 * TODO: Matrix vs Client metaada
 *
 **/

entity Question {
    code String,
    question String
}

entity Requirement {
    code String,
    description String
}

relationship ManyToMany {
    Requirement{question(question)} to Question{requirement}
}


/**
 * Workflow
 *
 * TODO: Workflow review tracking
 *
 **/
entity Workflow {
    name String,
    description String
}


entity WorkflowStep {
    name String,
    description String,
    authority ApplicationAuthorities
}

/*
 * SHould be thru table but JHIPSTER is not exposing authorities entity
 *
relationship OneToMany{
    Authority to WorkflowStep{authority(name)}
}
*/


relationship ManyToMany {
    Workflow{workflowStep(name)} to WorkflowStep{workflow}
}




/**
 * Checklist
 *
 * TODO: Questions help or guidance fields.
 * Main/core checlists, Supplemental Checklists
 *
 **/
entity Checklist {
    name String,
    description String,
    version String,
    status ChecklistStatus
}

entity ChecklistQuestion {
    code String,
    description String minlength(1) maxlength(4000)
}

relationship OneToMany {
    Checklist to ChecklistQuestion{checklist(name)}
}

relationship OneToMany {
    Country to Checklist{country(name)}
}

relationship OneToMany {
    ChecklistQuestion{child} to ChecklistQuestion{parent(description)}
}

/*
relationship OneToMany {
    Question to ChecklistQuestion{question(question)}
}
*/

/**
 * Engagement
 *
 *
 **/
entity Engagement {
    fiscalYear String,
    description String,
    status ResponseStatus
}

relationship OneToMany{
    Client to Engagement{client(name)}
}

relationship OneToMany{
    Checklist to Engagement{checklist(name)}
}

entity EngagementMember {
    firstName String,
    lastName String,
    phone String,
    email String,
    authority EngagementAuthorities
}
relationship OneToOne{
    EngagementMember{user(login)} to User
}

relationship ManyToMany {
    Engagement{engagementMember(firstName)} to EngagementMember{engagement}
}



/**
 * Response Responses
 *
*
 **/
entity AuditProfile {
    description String,
    status ResponseStatus
}

relationship OneToMany{
    Engagement to AuditProfile{engagement(description)}
}



/*
relationship OneToMany{
    Workflow to AuditProfile{workflow(description)}
}
*/

/**
  *
  * How to handle question responses as part of the relaqionship?
  *
  */
/*
relationship ManyToMany {
    AuditProfile{question(question)} to ChecklistQuestion{auditProfile}
}
*/



entity AuditQuestionResponse {
    questionResponse String
}
relationship OneToMany{
    ChecklistQuestion to AuditQuestionResponse{question(description)}
}


relationship ManyToMany {
    AuditProfile{auditQuestionResponse(questionResponse)} to AuditQuestionResponse{auditProfile}
}


entity AuditProfileLogEntry {
    happened ZonedDateTime,
    description String
}

relationship OneToOne{
    AuditProfileLogEntry{who(login)} to User
}

relationship OneToMany {
    AuditProfile{log(description)} to AuditProfileLogEntry
}


/**
 * Access Control
 **/

entity UserProfile {

}
relationship OneToOne{
    UserProfile{user(login)} to User
}

relationship OneToMany{
    Client to UserProfile{client(name)}
}



entity Feature {
    code String  required  minlength(1)  maxlength(20) ,
    label String  required  minlength(1)  maxlength(50)
}

relationship OneToMany {
    Feature{child} to Feature{parent(label)}
}


entity FeatureAuthority {
    authority ApplicationAuthorities
}

/*
 * SHould be thru table but JHIPSTER is not exposing authorities entity
 *
relationship OneToMany{
    Feature to FeatureAuthority{authority(name)}
}




/**
 * Options
 * NOTE: https://jhipster.github.io/jdl/
 *
 * paginate * with pager | infinite-scroll [except ?]
 * dto * with mapstruct [except ?]
 * service * with serviceClass | serviceImpl [except ?]
 * microservice * with <app-name> [except ?]
 * search * with elasticsearch [except ?]
 * skipClient for A
 * skipServer for B
 * angularSuffix * with mySuperEntities
 *
 **/
paginate * with pager

//service * with serviceImpl

dto Checklist with mapstruct
dto ChecklistQuestion with mapstruct
dto AuditProfile with mapstruct
dto AuditQuestionResponse with mapstruct
